Index: app/src/main/java/com/specknet/pdiotapp/live/LiveDataActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.specknet.pdiotapp.live\r\n\r\n//import org.apache.commons.math3.complex.Complex\r\n//import org.apache.commons.math3.transform.DftNormalization\r\n//import org.apache.commons.math3.transform.FastFourierTransformer\r\n//import org.apache.commons.math3.transform.TransformType\r\n//import org.apache.commons.math3.util.MathArrays\r\n//import android.app.Activity\r\nimport android.content.BroadcastReceiver\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.IntentFilter\r\nimport android.content.res.AssetFileDescriptor\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.os.HandlerThread\r\nimport android.os.Looper\r\nimport android.util.Log\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.content.ContextCompat\r\nimport com.github.mikephil.charting.charts.LineChart\r\nimport com.github.mikephil.charting.data.Entry\r\nimport com.github.mikephil.charting.data.LineData\r\nimport com.github.mikephil.charting.data.LineDataSet\r\nimport com.github.mikephil.charting.interfaces.datasets.ILineDataSet\r\nimport com.specknet.pdiotapp.R\r\nimport com.specknet.pdiotapp.utils.Constants\r\nimport com.specknet.pdiotapp.utils.RESpeckLiveData\r\nimport com.specknet.pdiotapp.utils.ThingyLiveData\r\nimport org.tensorflow.lite.Interpreter\r\nimport java.nio.*\r\nimport java.nio.channels.FileChannel\r\n\r\n\r\nclass LiveDataActivity : AppCompatActivity() {\r\n\r\n    // global graph variables\r\n    lateinit var dataSet_res_accel_x: LineDataSet\r\n    lateinit var dataSet_res_accel_y: LineDataSet\r\n    lateinit var dataSet_res_accel_z: LineDataSet\r\n\r\n    lateinit var dataSet_res_gyro_x: LineDataSet\r\n    lateinit var dataSet_res_gyro_y: LineDataSet\r\n    lateinit var dataSet_res_gyro_z: LineDataSet\r\n\r\n    lateinit var dataSet_thingy_accel_x: LineDataSet\r\n    lateinit var dataSet_thingy_accel_y: LineDataSet\r\n    lateinit var dataSet_thingy_accel_z: LineDataSet\r\n\r\n    lateinit var dataSet_thingy_gyro_x: LineDataSet\r\n    lateinit var dataSet_thingy_gyro_y: LineDataSet\r\n    lateinit var dataSet_thingy_gyro_z: LineDataSet\r\n\r\n    var time = 0f\r\n    lateinit var allRespeckData: LineData\r\n\r\n    lateinit var allThingyData: LineData\r\n\r\n    lateinit var respeckChart: LineChart\r\n    lateinit var thingyChart: LineChart\r\n\r\n    // global broadcast receiver so we can unregister it\r\n    lateinit var respeckLiveUpdateReceiver: BroadcastReceiver\r\n    lateinit var thingyLiveUpdateReceiver: BroadcastReceiver\r\n    lateinit var looperRespeck: Looper\r\n    lateinit var looperThingy: Looper\r\n\r\n    val filterTestRespeck = IntentFilter(Constants.ACTION_RESPECK_LIVE_BROADCAST)\r\n    val filterTestThingy = IntentFilter(Constants.ACTION_THINGY_BROADCAST)\r\n    private lateinit var tflite_thingy: Interpreter\r\n    private lateinit var tflite_res: Interpreter\r\n    val activities = mapOf(\r\n        0 to \"Ascending stairs\",\r\n        1 to \"Descending stairs\",\r\n        2 to \"Lying down back\",\r\n        3 to \"Lying down on left\",\r\n        4 to \"Lying down on stomach\",\r\n        5 to \"Lying down right\",\r\n        6 to \"Miscellaneous movements\",\r\n        7 to \"Normal walking\",\r\n        8 to \"Running\",\r\n        9 to \"Shuffle walking\",\r\n        10 to \"Sitting\",\r\n        11 to \"Standing\"\r\n    )\r\n//    val activities = mapOf(\r\n//        0 to \"ascending stairs normal\",\r\n//        1 to \"descending stairs normal\",\r\n//        2 to \"lying down back coughing\",\r\n//        3 to \"lying down back hyperventilating\",\r\n//        4 to \"lying down back laughing\",\r\n//        5 to \"lying down back normal\",\r\n//        6 to \"lying down back singing\",\r\n//        7 to \"lying down back talking\",\r\n//        8 to \"lying down on left coughing\",\r\n//        9 to \"lying down on left hyperventilating\",\r\n//        10 to \"lying down on left laughing\",\r\n//        11 to \"lying down on left normal\",\r\n//        12 to \"lying down on left singing\",\r\n//        13 to \"lying down on left talking\",\r\n//        14 to \"lying down on stomach coughing\",\r\n//        15 to \"lying down on stomach hyperventilating\",\r\n//        16 to \"lying down on stomach laughing\",\r\n//        17 to \"lying down on stomach normal\",\r\n//        18 to \"lying down on stomach singing\",\r\n//        19 to \"lying down on stomach talking\",\r\n//        20 to \"lying down right coughing\",\r\n//        21 to \"lying down right hyperventilating\",\r\n//        22 to \"lying down right laughing\",\r\n//        23 to \"lying down right normal\",\r\n//        24 to \"lying down right singing\",\r\n//        25 to \"lying down right talking\",\r\n//        26 to \"miscellaneous movements normal\",\r\n//        27 to \"normal walking normal\",\r\n//        28 to \"running normal\",\r\n//        29 to \"shuffle walking normal\",\r\n//        30 to \"sitting coughing\",\r\n//        31 to \"sitting eating\",\r\n//        32 to \"sitting hyperventilating\",\r\n//        33 to \"sitting laughing\",\r\n//        34 to \"sitting normal\",\r\n//        35 to \"sitting singing\",\r\n//        36 to \"sitting talking\",\r\n//        37 to \"standing coughing\",\r\n//        38 to \"standing eating\",\r\n//        39 to \"standing hyperventilating\",\r\n//        40 to \"standing laughing\",\r\n//        41 to \"standing normal\",\r\n//        42 to \"standing singing\",\r\n//        43 to \"standing talking\"\r\n//    )\r\n    val minVal = -300f\r\n    val maxVal = 300f\r\n\r\n\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_live_data)\r\n\r\n        setupCharts()\r\n\r\n        // set up the broadcast receiver\r\n        respeckLiveUpdateReceiver = object : BroadcastReceiver() {\r\n            override fun onReceive(context: Context, intent: Intent) {\r\n\r\n                Log.i(\"thread\", \"I am running on thread = \" + Thread.currentThread().name)\r\n\r\n                val action = intent.action\r\n\r\n                if (action == Constants.ACTION_RESPECK_LIVE_BROADCAST) {\r\n\r\n                    val liveData =\r\n                        intent.getSerializableExtra(Constants.RESPECK_LIVE_DATA) as RESpeckLiveData\r\n                    Log.d(\"Live\", \"onReceive: liveData = \" + liveData)\r\n\r\n                    // get all relevant intent contents\r\n                    val x = liveData.accelX\r\n                    val y = liveData.accelY\r\n                    val z = liveData.accelZ\r\n\r\n                    time += 1\r\n                    updateGraph(\"respeck\", x, y, z)\r\n\r\n                    val gyro_x = liveData.gyro.x\r\n                    val gyro_y = liveData.gyro.y\r\n                    val gyro_z = liveData.gyro.z\r\n\r\n                    dataSet_res_gyro_x.addEntry(Entry(time, gyro_x))\r\n                    dataSet_res_gyro_y.addEntry(Entry(time, gyro_y))\r\n                    dataSet_res_gyro_z.addEntry(Entry(time, gyro_z))\r\n\r\n                    runModelWithResAvailableData()\r\n                }\r\n            }\r\n        }\r\n\r\n        // register receiver on another thread\r\n        val handlerThreadRespeck = HandlerThread(\"bgThreadRespeckLive\")\r\n        handlerThreadRespeck.start()\r\n        looperRespeck = handlerThreadRespeck.looper\r\n        val handlerRespeck = Handler(looperRespeck)\r\n        this.registerReceiver(respeckLiveUpdateReceiver, filterTestRespeck, null, handlerRespeck)\r\n\r\n        // set up the broadcast receiver\r\n        thingyLiveUpdateReceiver = object : BroadcastReceiver() {\r\n            override fun onReceive(context: Context, intent: Intent) {\r\n\r\n                Log.i(\"thread\", \"I am running on thread = \" + Thread.currentThread().name)\r\n\r\n                val action = intent.action\r\n\r\n                if (action == Constants.ACTION_THINGY_BROADCAST) {\r\n\r\n                    val liveData =\r\n                        intent.getSerializableExtra(Constants.THINGY_LIVE_DATA) as ThingyLiveData\r\n                    Log.d(\"Live\", \"onReceive: liveData = \" + liveData)\r\n\r\n                    // get all relevant intent contents\r\n                    val accl_x = liveData.accelX\r\n                    val accl_y = liveData.accelY\r\n                    val accl_z = liveData.accelZ\r\n\r\n                    time += 1\r\n                    updateGraph(\"thingy\", accl_x, accl_y, accl_z)\r\n\r\n                    val gyro_x = liveData.gyro.x\r\n                    val gyro_y = liveData.gyro.y\r\n                    val gyro_z = liveData.gyro.z\r\n\r\n                    dataSet_thingy_gyro_x.addEntry(Entry(time, gyro_x))\r\n                    dataSet_thingy_gyro_y.addEntry(Entry(time, gyro_y))\r\n                    dataSet_thingy_gyro_z.addEntry(Entry(time, gyro_z))\r\n\r\n//                    runModelWithThingyAvailableData() // TODO waiting thingy model\r\n                }\r\n            }\r\n        }\r\n\r\n        // register receiver on another thread\r\n        val handlerThreadThingy = HandlerThread(\"bgThreadThingyLive\")\r\n        handlerThreadThingy.start()\r\n        looperThingy = handlerThreadThingy.looper\r\n        val handlerThingy = Handler(looperThingy)\r\n        this.registerReceiver(thingyLiveUpdateReceiver, filterTestThingy, null, handlerThingy)\r\n\r\n//        // Load Thingy TFLite model\r\n//        val modelPath_thingy = \"model_thingy_accl_gyro_no_norm_25.tflite\" // TODO thingy model file name\r\n//        val assetFileDescriptor_thingy: AssetFileDescriptor = assets.openFd(modelPath_thingy)\r\n//        val fileInputStream_thingy = assetFileDescriptor_thingy.createInputStream()\r\n//        val fileChannel_thingy: FileChannel = fileInputStream_thingy.channel\r\n//        val startOffset_thingy: Long = assetFileDescriptor_thingy.startOffset\r\n//        val declaredLength_thingy: Long = assetFileDescriptor_thingy.declaredLength\r\n//        val tfliteModel_thingy: MappedByteBuffer = fileChannel_thingy.map(\r\n//            FileChannel.MapMode.READ_ONLY,\r\n//            startOffset_thingy,\r\n//            declaredLength_thingy\r\n//        )\r\n//\r\n//        val options_thingy = Interpreter.Options()\r\n//        tflite_thingy = Interpreter(tfliteModel_thingy, options_thingy)\r\n\r\n        val modelPath_res = \"model_respeck_accl_only_no_norm_task_1_50.tflite\"\r\n//        val modelPath_res = \"model_respeck_accl_gyro_norm_task_5_50.tflite\"\r\n        val assetFileDescriptor_res: AssetFileDescriptor = assets.openFd(modelPath_res)\r\n        val fileInputStream_res = assetFileDescriptor_res.createInputStream()\r\n        val fileChannel_res: FileChannel = fileInputStream_res.channel\r\n        val startOffset_res: Long = assetFileDescriptor_res.startOffset\r\n        val declaredLength_res: Long = assetFileDescriptor_res.declaredLength\r\n        val tfliteModel_res: MappedByteBuffer = fileChannel_res.map(\r\n            FileChannel.MapMode.READ_ONLY,\r\n            startOffset_res,\r\n            declaredLength_res\r\n        )\r\n\r\n        val options_res = Interpreter.Options()\r\n        tflite_res = Interpreter(tfliteModel_res, options_res)\r\n    }\r\n\r\n//    fun runModelWithThingyAvailableData() {\r\n//        // Make sure you have enough data\r\n//        if (dataSet_thingy_accel_x.entryCount < 25\r\n//            || dataSet_thingy_accel_x.entryCount % 100 != 0\r\n//        ) {\r\n//            return\r\n//        }\r\n//\r\n//        val entries_thingy_accel_x = dataSet_thingy_accel_x.values\r\n//        val entries_thingy_accel_y = dataSet_thingy_accel_y.values\r\n//        val entries_thingy_accel_z = dataSet_thingy_accel_z.values\r\n//\r\n//        val entries_thingy_gyro_x = dataSet_thingy_gyro_x.values\r\n//        val entries_thingy_gyro_y = dataSet_thingy_gyro_y.values\r\n//        val entries_thingy_gyro_z = dataSet_thingy_gyro_z.values\r\n//\r\n//        // Create a ByteBuffer to hold the float values for input to the TFLite model\r\n//        val inputBuffer: ByteBuffer = ByteBuffer.allocateDirect(4 * 25 * 6)\r\n//\r\n//        // Populate the ByteBuffer, where y is the reading and x is the time\r\n//        val startIndex = dataSet_thingy_accel_x.entryCount - 25\r\n//        for (i in startIndex until startIndex + 25) {\r\n//            inputBuffer.putFloat(entries_thingy_accel_x[i].y)\r\n//            inputBuffer.putFloat(entries_thingy_accel_y[i].y)\r\n//            inputBuffer.putFloat(entries_thingy_accel_z[i].y)\r\n//\r\n//            inputBuffer.putFloat(entries_thingy_gyro_x[i].y)\r\n//            inputBuffer.putFloat(entries_thingy_gyro_y[i].y)\r\n//            inputBuffer.putFloat(entries_thingy_gyro_z[i].y)\r\n//        }\r\n//\r\n//        // Prepare the output buffer\r\n//        val outputBuffer: ByteBuffer = ByteBuffer.allocateDirect(48)\r\n////        outputBuffer.order(ByteOrder.nativeOrder())\r\n//\r\n//        // Run inference using TensorFlow Lite\r\n//        tflite_thingy.run(inputBuffer, outputBuffer)\r\n//\r\n//        // Rewind the buffer to the beginning so we can read from it\r\n//        outputBuffer.rewind()\r\n//\r\n//        // Convert ByteBuffer to FloatBuffer for easier handling\r\n//        val floatBuffer: FloatBuffer = outputBuffer.asFloatBuffer()\r\n//\r\n//        // Initialize variables to keep track of the maximum value and corresponding index\r\n//        var maxValue = floatBuffer.get(0)\r\n//        var outputIndex = 0\r\n//\r\n//        // Iterate through the output buffer to find the maximum value and index\r\n//        for (i in 1 until floatBuffer.limit()) {\r\n//            val currentValue = floatBuffer.get(i)\r\n//            if (currentValue > maxValue) {\r\n//                maxValue = currentValue\r\n//                outputIndex = i\r\n//            }\r\n//        }\r\n//\r\n//        Log.i(\"Model\", outputIndex.toString())\r\n//\r\n//        val currentActivity = activities[outputIndex]\r\n//        // Update the TextView\r\n//        (findViewById<TextView>(R.id.currentAct)).text = \"Current Activity: $currentActivity\"\r\n//\r\n//    }\r\n\r\n    fun runModelWithResAvailableData() {\r\n        // Make sure you have enough data\r\n        if (dataSet_res_accel_x.entryCount < 50\r\n            || dataSet_res_accel_x.entryCount % 25 != 0\r\n        ) {\r\n            return\r\n        }\r\n\r\n        val entries_res_accel_x = dataSet_res_accel_x.values\r\n        val entries_res_accel_y = dataSet_res_accel_y.values\r\n        val entries_res_accel_z = dataSet_res_accel_z.values\r\n\r\n        val entries_res_gyro_x = dataSet_res_gyro_x.values\r\n        val entries_res_gyro_y = dataSet_res_gyro_y.values\r\n        val entries_res_gyro_z = dataSet_res_gyro_z.values\r\n\r\n        // Create a ByteBuffer to hold the float values for input to the TFLite model\r\n        val inputBuffer: ByteBuffer = ByteBuffer.allocateDirect(4 * 50 * 3)\r\n//        val inputBuffer: ByteBuffer = ByteBuffer.allocateDirect(4 * 50 * 6)\r\n\r\n        // Populate the ByteBuffer, where y is the reading and x is the time\r\n        val startIndex = dataSet_res_accel_x.entryCount - 50\r\n        for (i in startIndex until startIndex + 50) {\r\n            inputBuffer.putFloat(entries_res_accel_x[i].y)\r\n            inputBuffer.putFloat(entries_res_accel_y[i].y)\r\n            inputBuffer.putFloat(entries_res_accel_z[i].y)\r\n\r\n//            // Normalize the y-values of the gyro data\r\n//            val normalizedGyroX = (entries_res_gyro_x[i].y - minVal) / (maxVal - minVal)\r\n//            val normalizedGyroY = (entries_res_gyro_y[i].y - minVal) / (maxVal - minVal)\r\n//            val normalizedGyroZ = (entries_res_gyro_z[i].y - minVal) / (maxVal - minVal)\r\n//\r\n//            // Now put these normalized values into the inputBuffer\r\n//            inputBuffer.putFloat(normalizedGyroX)\r\n//            inputBuffer.putFloat(normalizedGyroY)\r\n//            inputBuffer.putFloat(normalizedGyroZ)\r\n        }\r\n\r\n        // Prepare the output buffer\r\n        val outputBuffer: ByteBuffer = ByteBuffer.allocateDirect(12 * 4)\r\n//        val outputBuffer: ByteBuffer = ByteBuffer.allocateDirect(44 * 4)\r\n//        outputBuffer.order(ByteOrder.nativeOrder())\r\n\r\n        // Run inference using TensorFlow Lite\r\n        tflite_res.run(inputBuffer, outputBuffer)\r\n\r\n        // Rewind the buffer to the beginning so we can read from it\r\n        outputBuffer.rewind()\r\n\r\n        // Convert ByteBuffer to FloatBuffer for easier handling\r\n        val floatBuffer: FloatBuffer = outputBuffer.asFloatBuffer()\r\n\r\n        // Initialize variables to keep track of the maximum value and corresponding index\r\n        var maxValue = floatBuffer.get(0)\r\n        var outputIndex = 0\r\n\r\n        // Iterate through the output buffer to find the maximum value and index\r\n        for (i in 1 until floatBuffer.limit()) {\r\n            val currentValue = floatBuffer.get(i)\r\n            if (currentValue > maxValue) {\r\n                maxValue = currentValue\r\n                outputIndex = i\r\n            }\r\n        }\r\n\r\n        Log.i(\"Model\", outputIndex.toString())\r\n\r\n        val currentActivity = activities[outputIndex]\r\n        // Update the TextView\r\n        (findViewById<TextView>(R.id.currentAct)).text = \"Current Activity: $currentActivity\"\r\n\r\n    }\r\n\r\n\r\n    fun setupCharts() {\r\n        respeckChart = findViewById(R.id.respeck_chart)\r\n        thingyChart = findViewById(R.id.thingy_chart)\r\n\r\n        // Respeck\r\n\r\n        time = 0f\r\n        val entries_res_accel_x = ArrayList<Entry>()\r\n        val entries_res_accel_y = ArrayList<Entry>()\r\n        val entries_res_accel_z = ArrayList<Entry>()\r\n\r\n        val entries_res_gyro_x = ArrayList<Entry>()\r\n        val entries_res_gyro_y = ArrayList<Entry>()\r\n        val entries_res_gyro_z = ArrayList<Entry>()\r\n\r\n        dataSet_res_accel_x = LineDataSet(entries_res_accel_x, \"Accel X\")\r\n        dataSet_res_accel_y = LineDataSet(entries_res_accel_y, \"Accel Y\")\r\n        dataSet_res_accel_z = LineDataSet(entries_res_accel_z, \"Accel Z\")\r\n\r\n        dataSet_res_gyro_x = LineDataSet(entries_res_gyro_x, \"Gyro X\")\r\n        dataSet_res_gyro_y = LineDataSet(entries_res_gyro_y, \"Gyro Y\")\r\n        dataSet_res_gyro_z = LineDataSet(entries_res_gyro_z, \"Gyro Z\")\r\n\r\n        dataSet_res_accel_x.setDrawCircles(false)\r\n        dataSet_res_accel_y.setDrawCircles(false)\r\n        dataSet_res_accel_z.setDrawCircles(false)\r\n\r\n        dataSet_res_gyro_x.setDrawCircles(false)\r\n        dataSet_res_gyro_y.setDrawCircles(false)\r\n        dataSet_res_gyro_z.setDrawCircles(false)\r\n\r\n        dataSet_res_accel_x.setColor(\r\n            ContextCompat.getColor(\r\n                this,\r\n                R.color.red\r\n            )\r\n        )\r\n        dataSet_res_accel_y.setColor(\r\n            ContextCompat.getColor(\r\n                this,\r\n                R.color.green\r\n            )\r\n        )\r\n        dataSet_res_accel_z.setColor(\r\n            ContextCompat.getColor(\r\n                this,\r\n                R.color.blue\r\n            )\r\n        )\r\n\r\n        val dataSetsRes = ArrayList<ILineDataSet>()\r\n        dataSetsRes.add(dataSet_res_accel_x)\r\n        dataSetsRes.add(dataSet_res_accel_y)\r\n        dataSetsRes.add(dataSet_res_accel_z)\r\n\r\n        allRespeckData = LineData(dataSetsRes)\r\n        respeckChart.data = allRespeckData\r\n        respeckChart.invalidate()\r\n\r\n        // Thingy\r\n\r\n        time = 0f\r\n        val entries_thingy_accel_x = ArrayList<Entry>()\r\n        val entries_thingy_accel_y = ArrayList<Entry>()\r\n        val entries_thingy_accel_z = ArrayList<Entry>()\r\n\r\n        val entries_thingy_gyro_x = ArrayList<Entry>()\r\n        val entries_thingy_gyro_y = ArrayList<Entry>()\r\n        val entries_thingy_gyro_z = ArrayList<Entry>()\r\n\r\n        dataSet_thingy_accel_x = LineDataSet(entries_thingy_accel_x, \"Accel X\")\r\n        dataSet_thingy_accel_y = LineDataSet(entries_thingy_accel_y, \"Accel Y\")\r\n        dataSet_thingy_accel_z = LineDataSet(entries_thingy_accel_z, \"Accel Z\")\r\n\r\n        dataSet_thingy_gyro_x = LineDataSet(entries_thingy_gyro_x, \"Gyro X\")\r\n        dataSet_thingy_gyro_y = LineDataSet(entries_thingy_gyro_y, \"Gyro Y\")\r\n        dataSet_thingy_gyro_z = LineDataSet(entries_thingy_gyro_z, \"Gyro Z\")\r\n\r\n        dataSet_thingy_accel_x.setDrawCircles(false)\r\n        dataSet_thingy_accel_y.setDrawCircles(false)\r\n        dataSet_thingy_accel_z.setDrawCircles(false)\r\n\r\n        dataSet_thingy_gyro_x.setDrawCircles(false)\r\n        dataSet_thingy_gyro_y.setDrawCircles(false)\r\n        dataSet_thingy_gyro_z.setDrawCircles(false)\r\n\r\n        dataSet_thingy_accel_x.setColor(\r\n            ContextCompat.getColor(\r\n                this,\r\n                R.color.red\r\n            )\r\n        )\r\n        dataSet_thingy_accel_y.setColor(\r\n            ContextCompat.getColor(\r\n                this,\r\n                R.color.green\r\n            )\r\n        )\r\n        dataSet_thingy_accel_z.setColor(\r\n            ContextCompat.getColor(\r\n                this,\r\n                R.color.blue\r\n            )\r\n        )\r\n\r\n        val dataSetsThingy = ArrayList<ILineDataSet>()\r\n        dataSetsThingy.add(dataSet_thingy_accel_x)\r\n        dataSetsThingy.add(dataSet_thingy_accel_y)\r\n        dataSetsThingy.add(dataSet_thingy_accel_z)\r\n\r\n        allThingyData = LineData(dataSetsThingy)\r\n        thingyChart.data = allThingyData\r\n        thingyChart.invalidate()\r\n    }\r\n\r\n    fun updateGraph(graph: String, x: Float, y: Float, z: Float) {\r\n        // take the first element from the queue\r\n        // and update the graph with it\r\n        if (graph == \"respeck\") {\r\n            dataSet_res_accel_x.addEntry(Entry(time, x))\r\n            dataSet_res_accel_y.addEntry(Entry(time, y))\r\n            dataSet_res_accel_z.addEntry(Entry(time, z))\r\n\r\n            runOnUiThread {\r\n                allRespeckData.notifyDataChanged()\r\n                respeckChart.notifyDataSetChanged()\r\n                respeckChart.invalidate()\r\n                respeckChart.setVisibleXRangeMaximum(150f)\r\n                respeckChart.moveViewToX(respeckChart.lowestVisibleX + 40)\r\n            }\r\n        } else if (graph == \"thingy\") {\r\n            dataSet_thingy_accel_x.addEntry(Entry(time, x))\r\n            dataSet_thingy_accel_y.addEntry(Entry(time, y))\r\n            dataSet_thingy_accel_z.addEntry(Entry(time, z))\r\n\r\n            runOnUiThread {\r\n                allThingyData.notifyDataChanged()\r\n                thingyChart.notifyDataSetChanged()\r\n                thingyChart.invalidate()\r\n                thingyChart.setVisibleXRangeMaximum(150f)\r\n                thingyChart.moveViewToX(thingyChart.lowestVisibleX + 40)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        unregisterReceiver(respeckLiveUpdateReceiver)\r\n        unregisterReceiver(thingyLiveUpdateReceiver)\r\n        looperRespeck.quit()\r\n        looperThingy.quit()\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/specknet/pdiotapp/live/LiveDataActivity.kt b/app/src/main/java/com/specknet/pdiotapp/live/LiveDataActivity.kt
--- a/app/src/main/java/com/specknet/pdiotapp/live/LiveDataActivity.kt	
+++ b/app/src/main/java/com/specknet/pdiotapp/live/LiveDataActivity.kt	
@@ -70,66 +70,66 @@
     val filterTestThingy = IntentFilter(Constants.ACTION_THINGY_BROADCAST)
     private lateinit var tflite_thingy: Interpreter
     private lateinit var tflite_res: Interpreter
-    val activities = mapOf(
-        0 to "Ascending stairs",
-        1 to "Descending stairs",
-        2 to "Lying down back",
-        3 to "Lying down on left",
-        4 to "Lying down on stomach",
-        5 to "Lying down right",
-        6 to "Miscellaneous movements",
-        7 to "Normal walking",
-        8 to "Running",
-        9 to "Shuffle walking",
-        10 to "Sitting",
-        11 to "Standing"
-    )
 //    val activities = mapOf(
-//        0 to "ascending stairs normal",
-//        1 to "descending stairs normal",
-//        2 to "lying down back coughing",
-//        3 to "lying down back hyperventilating",
-//        4 to "lying down back laughing",
-//        5 to "lying down back normal",
-//        6 to "lying down back singing",
-//        7 to "lying down back talking",
-//        8 to "lying down on left coughing",
-//        9 to "lying down on left hyperventilating",
-//        10 to "lying down on left laughing",
-//        11 to "lying down on left normal",
-//        12 to "lying down on left singing",
-//        13 to "lying down on left talking",
-//        14 to "lying down on stomach coughing",
-//        15 to "lying down on stomach hyperventilating",
-//        16 to "lying down on stomach laughing",
-//        17 to "lying down on stomach normal",
-//        18 to "lying down on stomach singing",
-//        19 to "lying down on stomach talking",
-//        20 to "lying down right coughing",
-//        21 to "lying down right hyperventilating",
-//        22 to "lying down right laughing",
-//        23 to "lying down right normal",
-//        24 to "lying down right singing",
-//        25 to "lying down right talking",
-//        26 to "miscellaneous movements normal",
-//        27 to "normal walking normal",
-//        28 to "running normal",
-//        29 to "shuffle walking normal",
-//        30 to "sitting coughing",
-//        31 to "sitting eating",
-//        32 to "sitting hyperventilating",
-//        33 to "sitting laughing",
-//        34 to "sitting normal",
-//        35 to "sitting singing",
-//        36 to "sitting talking",
-//        37 to "standing coughing",
-//        38 to "standing eating",
-//        39 to "standing hyperventilating",
-//        40 to "standing laughing",
-//        41 to "standing normal",
-//        42 to "standing singing",
-//        43 to "standing talking"
+//        0 to "Ascending stairs",
+//        1 to "Descending stairs",
+//        2 to "Lying down back",
+//        3 to "Lying down on left",
+//        4 to "Lying down on stomach",
+//        5 to "Lying down right",
+//        6 to "Miscellaneous movements",
+//        7 to "Normal walking",
+//        8 to "Running",
+//        9 to "Shuffle walking",
+//        10 to "Sitting",
+//        11 to "Standing"
 //    )
+    val activities = mapOf(
+        0 to "ascending stairs normal",
+        1 to "descending stairs normal",
+        2 to "lying down back coughing",
+        3 to "lying down back hyperventilating",
+        4 to "lying down back laughing",
+        5 to "lying down back normal",
+        6 to "lying down back singing",
+        7 to "lying down back talking",
+        8 to "lying down on left coughing",
+        9 to "lying down on left hyperventilating",
+        10 to "lying down on left laughing",
+        11 to "lying down on left normal",
+        12 to "lying down on left singing",
+        13 to "lying down on left talking",
+        14 to "lying down on stomach coughing",
+        15 to "lying down on stomach hyperventilating",
+        16 to "lying down on stomach laughing",
+        17 to "lying down on stomach normal",
+        18 to "lying down on stomach singing",
+        19 to "lying down on stomach talking",
+        20 to "lying down right coughing",
+        21 to "lying down right hyperventilating",
+        22 to "lying down right laughing",
+        23 to "lying down right normal",
+        24 to "lying down right singing",
+        25 to "lying down right talking",
+        26 to "miscellaneous movements normal",
+        27 to "normal walking normal",
+        28 to "running normal",
+        29 to "shuffle walking normal",
+        30 to "sitting coughing",
+        31 to "sitting eating",
+        32 to "sitting hyperventilating",
+        33 to "sitting laughing",
+        34 to "sitting normal",
+        35 to "sitting singing",
+        36 to "sitting talking",
+        37 to "standing coughing",
+        38 to "standing eating",
+        39 to "standing hyperventilating",
+        40 to "standing laughing",
+        41 to "standing normal",
+        42 to "standing singing",
+        43 to "standing talking"
+    )
     val minVal = -300f
     val maxVal = 300f
 
@@ -241,8 +241,8 @@
 //        val options_thingy = Interpreter.Options()
 //        tflite_thingy = Interpreter(tfliteModel_thingy, options_thingy)
 
-        val modelPath_res = "model_respeck_accl_only_no_norm_task_1_50.tflite"
-//        val modelPath_res = "model_respeck_accl_gyro_norm_task_5_50.tflite"
+//        val modelPath_res = "model_respeck_accl_only_no_norm_task_1_50.tflite"
+        val modelPath_res = "model_respeck_accl_gyro_norm_task_5_50.tflite"
         val assetFileDescriptor_res: AssetFileDescriptor = assets.openFd(modelPath_res)
         val fileInputStream_res = assetFileDescriptor_res.createInputStream()
         val fileChannel_res: FileChannel = fileInputStream_res.channel
@@ -340,8 +340,8 @@
         val entries_res_gyro_z = dataSet_res_gyro_z.values
 
         // Create a ByteBuffer to hold the float values for input to the TFLite model
-        val inputBuffer: ByteBuffer = ByteBuffer.allocateDirect(4 * 50 * 3)
-//        val inputBuffer: ByteBuffer = ByteBuffer.allocateDirect(4 * 50 * 6)
+//        val inputBuffer: ByteBuffer = ByteBuffer.allocateDirect(4 * 50 * 3)
+        val inputBuffer: ByteBuffer = ByteBuffer.allocateDirect(4 * 50 * 6)
 
         // Populate the ByteBuffer, where y is the reading and x is the time
         val startIndex = dataSet_res_accel_x.entryCount - 50
@@ -350,21 +350,20 @@
             inputBuffer.putFloat(entries_res_accel_y[i].y)
             inputBuffer.putFloat(entries_res_accel_z[i].y)
 
-//            // Normalize the y-values of the gyro data
-//            val normalizedGyroX = (entries_res_gyro_x[i].y - minVal) / (maxVal - minVal)
-//            val normalizedGyroY = (entries_res_gyro_y[i].y - minVal) / (maxVal - minVal)
-//            val normalizedGyroZ = (entries_res_gyro_z[i].y - minVal) / (maxVal - minVal)
-//
-//            // Now put these normalized values into the inputBuffer
-//            inputBuffer.putFloat(normalizedGyroX)
-//            inputBuffer.putFloat(normalizedGyroY)
-//            inputBuffer.putFloat(normalizedGyroZ)
+            // Normalize the y-values of the gyro data
+            val normalizedGyroX = (entries_res_gyro_x[i].y - minVal) / (maxVal - minVal)
+            val normalizedGyroY = (entries_res_gyro_y[i].y - minVal) / (maxVal - minVal)
+            val normalizedGyroZ = (entries_res_gyro_z[i].y - minVal) / (maxVal - minVal)
+
+            // Now put these normalized values into the inputBuffer
+            inputBuffer.putFloat(normalizedGyroX)
+            inputBuffer.putFloat(normalizedGyroY)
+            inputBuffer.putFloat(normalizedGyroZ)
         }
 
         // Prepare the output buffer
-        val outputBuffer: ByteBuffer = ByteBuffer.allocateDirect(12 * 4)
-//        val outputBuffer: ByteBuffer = ByteBuffer.allocateDirect(44 * 4)
-//        outputBuffer.order(ByteOrder.nativeOrder())
+//        val outputBuffer: ByteBuffer = ByteBuffer.allocateDirect(12 * 4)
+        val outputBuffer: ByteBuffer = ByteBuffer.allocateDirect(44 * 4)
 
         // Run inference using TensorFlow Lite
         tflite_res.run(inputBuffer, outputBuffer)
